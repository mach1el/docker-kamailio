#!ifndef DBURL
#!define DBURL "postgres://postgres:postgres@localhost/postgres"
#!endif

#!ifndef RTPsock
#!define RTPsock "udp:localhost:2229"
#!endif

#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3

####### Global Parameters #########
debug=2
log_stderror=yes
memdbg=5
memlog=5
log_facility=LOG_LOCAL0
fork=yes
children=4
disable_tcp=yes
auto_aliases=no
listen=udp:localhost:5060
sip_warning=no

####### Modules Section ########

# set module path
#mpath="/usr/local/lib/kamailio/modules/"

loadmodule "tm.so"
#loadmodule "mi_rpc.so"
loadmodule "auth.so"
loadmodule "db_postgres.so"
loadmodule "auth_db.so"
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "dialog.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "acc.so"
loadmodule "stun.so"
loadmodule "outbound.so"
loadmodule "rtpengine.so"
loadmodule "nathelper.so"
loadmodule "drouting.so"
loadmodule "keepalive.so"

# ----------------- setting module-specific parameters ---------------

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

# ----- tm params -----
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 40000)

# ----- rr params -----
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 0)

# ----- dialog params -----
modparam("auth_db", "db_url", DBURL)
modparam("dialog", "db_url", DBURL)
modparam("dialog", "table_name", "kamailio_dialog")
modparam("dialog", "vars_table_name", "kamailio_dialog_vars")
modparam("dialog", "default_timeout", 43200)
modparam("dialog", "db_mode", 1)
modparam("dialog", "dlg_flag", 1)
modparam("dialog", "hash_size",  4096)

# ----- acc params -----
modparam("acc", "db_url", DBURL)
modparam("acc", "early_media", 1)
modparam("acc", "report_cancels", 1)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_table_acc","kamailio_acc")
modparam("acc", "db_table_missed_calls", "kamailio_acc")
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;"
	"dst_user=$rU;dst_domain=$rd")
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;"
	"dst_user=$rU;dst_domain=$rd")
modparam("acc", "cdr_enable", 1)
modparam("acc", "cdr_start_on_confirmed", 1)
modparam("acc", "cdrs_table", "kamailio_acc_cdrs")
modparam("acc", "cdr_start_id", "start_time")
modparam("acc", "cdr_end_id", "end_time")
modparam("acc", "cdr_duration_id", "duration")
modparam("acc", "cdr_extra","callid=$ci;method=$rm")

# ----- Drouting params -----
modparam("drouting", "db_url", DBURL)
#modparam("drouting", "sort_order", 2)
modparam("drouting", "ruri_avp", "$avp(dr_ruri)")
modparam("drouting", "drd_table", "kamailio_dr_gateways")
modparam("drouting", "drr_table", "kamailio_dr_rules")
modparam("drouting", "drg_table", "kamailio_dr_groups")
modparam("drouting", "drl_table", "kamailio_dr_gw_lists")
modparam("drouting", "enable_keepalive", 1)

# ----- RTPengine params ------
modparam("rtpengine", "rtpengine_sock", RTPsock)
modparam("nathelper", "received_avp", "$avp(rcv)")

# ----- Keepalive params ------
modparam("keepalive", "ping_interval", 5)

####### Routing Logic ########


# main request routing logic

request_route {

	route(REQINIT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		xlog("----- CANCEL CALL,$ru,$ci,$fn,$fu\n");
		setflag(FLT_ACC);
		setflag(FLT_ACCMISSED);
		setflag(FLT_ACCFAILED);
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	route(WITHINDLG);
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {

		xlog("L_INFO","----- CALL,$ru,$ci,$fn,$fu\n");
		setflag(FLT_ACC);
		setflag(FLT_ACCMISSED);
		setflag(FLT_ACCFAILED);
	}

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null) {
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# dispatch destinations
	#route(DISPATCH);
	route(DROUTING);
}

route[RELAY] {
	if (is_method("INVITE")) {
		t_on_branch("handle_nat");
		t_on_reply("handle_nat");
		t_on_failure("FAILED_ROUTE");
		rtpengine_manage("record-call");

	} else if (is_method("BYE|CANCEL")) {
		rtpengine_delete();
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

route[WITHINDLG] {
	if (has_totag()) {
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(FLT_ACC);
				setflag(FLT_ACCFAILED);
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					t_relay();
					exit;
				} else {
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

route[REGISTRAR] {
	if(!is_method("REGISTER"))
		return;

	sl_send_reply("404", "No registrar");
	exit;
}

route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

	sl_send_reply("404", "Not here");
	exit;
}


route[DROUTING] {
	if(!do_routing("0")) {
		sl_send_reply("503", "No routes available");
		exit;
	}

	xlog("L_INFO","----- Routing: Going to <$ru> via <$fu>,gateway: <$rd>\n");	
	t_on_failure("FAILED_ROUTE");
	route(RELAY);
	exit;
}

branch_route[handle_nat] {

	if (!is_method("INVITE") || !has_body("application/sdp"))
		return;
	rtpengine_offer();
}

onreply_route[handle_nat] {
	fix_nated_contact();
	if (!has_body("application/sdp"))
		return;

	rtpengine_answer();
}

failure_route[FAILED_ROUTE] {
	if (t_is_canceled()) {
		exit;
	}

	if (use_next_gw()) {
		xlog("L_INFO","----- Re-routing: Going to <$ru> via <$fu>,gateway: <$rd>\n");
		t_on_failure("FAILED_ROUTE");
		route(RELAY);
		exit;
	}
}

failure_route[missed_call] {
	if (t_is_canceled()) {
		exit;
	}
}